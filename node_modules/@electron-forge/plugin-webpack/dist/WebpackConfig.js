"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_merge_1 = require("webpack-merge");
const AssetRelocatorPatch_1 = __importDefault(require("./util/AssetRelocatorPatch"));
const processConfig_1 = __importDefault(require("./util/processConfig"));
const rendererTypeUtils_1 = require("./util/rendererTypeUtils");
const d = (0, debug_1.default)('electron-forge:plugin:webpack:webpackconfig');
class WebpackConfigGenerator {
    constructor(pluginConfig, projectDir, isProd, port) {
        // Users can override this method in a subclass to provide custom logic or
        // configuration parameters.
        this.preprocessConfig = async (config) => config({}, {
            mode: this.mode,
        });
        this.pluginConfig = pluginConfig;
        this.projectDir = projectDir;
        this.webpackDir = path_1.default.resolve(projectDir, '.webpack');
        this.isProd = isProd;
        this.port = port;
        d('Config mode:', this.mode);
    }
    async resolveConfig(config) {
        const rawConfig = typeof config === 'string'
            ? // eslint-disable-next-line @typescript-eslint/no-var-requires
                require(path_1.default.resolve(this.projectDir, config))
            : config;
        return (0, processConfig_1.default)(this.preprocessConfig, rawConfig);
    }
    get mode() {
        return this.isProd ? 'production' : 'development';
    }
    get rendererSourceMapOption() {
        return this.isProd ? 'source-map' : 'eval-source-map';
    }
    rendererTarget(entryPoint) {
        var _a;
        return ((_a = entryPoint.nodeIntegration) !== null && _a !== void 0 ? _a : this.pluginConfig.renderer.nodeIntegration) ? 'electron-renderer' : 'web';
    }
    rendererEntryPoint(entryPoint, inRendererDir, basename) {
        if (this.isProd) {
            return `\`file://$\{require('path').resolve(__dirname, '..', '${inRendererDir ? 'renderer' : '.'}', '${entryPoint.name}', '${basename}')}\``;
        }
        const baseUrl = `http://localhost:${this.port}/${entryPoint.name}`;
        if (basename !== 'index.html') {
            return `'${baseUrl}/${basename}'`;
        }
        return `'${baseUrl}'`;
    }
    toEnvironmentVariable(entryPoint, preload = false) {
        const suffix = preload ? '_PRELOAD_WEBPACK_ENTRY' : '_WEBPACK_ENTRY';
        return `${entryPoint.name.toUpperCase().replace(/ /g, '_')}${suffix}`;
    }
    getPreloadDefine(entryPoint) {
        if (!(0, rendererTypeUtils_1.isNoWindow)(entryPoint)) {
            if (this.isProd) {
                return `require('path').resolve(__dirname, '../renderer', '${entryPoint.name}', 'preload.js')`;
            }
            return `'${path_1.default.resolve(this.webpackDir, 'renderer', entryPoint.name, 'preload.js').replace(/\\/g, '\\\\')}'`;
        }
        else {
            // If this entry-point has no configured preload script just map this constant to `undefined`
            // so that any code using it still works.  This makes quick-start / docs simpler.
            return 'undefined';
        }
    }
    getDefines(inRendererDir = true) {
        const defines = {};
        if (!this.pluginConfig.renderer.entryPoints || !Array.isArray(this.pluginConfig.renderer.entryPoints)) {
            throw new Error('Required config option "renderer.entryPoints" has not been defined');
        }
        for (const entryPoint of this.pluginConfig.renderer.entryPoints) {
            const entryKey = this.toEnvironmentVariable(entryPoint);
            if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.html');
            }
            else {
                defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.js');
            }
            defines[`process.env.${entryKey}`] = defines[entryKey];
            const preloadDefineKey = this.toEnvironmentVariable(entryPoint, true);
            defines[preloadDefineKey] = this.getPreloadDefine(entryPoint);
            defines[`process.env.${preloadDefineKey}`] = defines[preloadDefineKey];
        }
        return defines;
    }
    async getMainConfig() {
        const mainConfig = await this.resolveConfig(this.pluginConfig.mainConfig);
        if (!mainConfig.entry) {
            throw new Error('Required option "mainConfig.entry" has not been defined');
        }
        const fix = (item) => {
            if (typeof item === 'string')
                return fix([item])[0];
            if (Array.isArray(item)) {
                return item.map((val) => (val.startsWith('./') ? path_1.default.resolve(this.projectDir, val) : val));
            }
            const ret = {};
            for (const key of Object.keys(item)) {
                ret[key] = fix(item[key]);
            }
            return ret;
        };
        mainConfig.entry = fix(mainConfig.entry);
        return (0, webpack_merge_1.merge)({
            devtool: 'source-map',
            target: 'electron-main',
            mode: this.mode,
            output: {
                path: path_1.default.resolve(this.webpackDir, 'main'),
                filename: 'index.js',
                libraryTarget: 'commonjs2',
            },
            plugins: [new webpack_1.default.DefinePlugin(this.getDefines())],
            node: {
                __dirname: false,
                __filename: false,
            },
        }, mainConfig || {});
    }
    async getPreloadConfigForEntryPoint(entryPoint) {
        if (!entryPoint.preload) {
            return {};
        }
        const rendererConfig = await this.resolveConfig(entryPoint.preload.config || this.pluginConfig.renderer.config);
        const prefixedEntries = entryPoint.prefixedEntries || [];
        return (0, webpack_merge_1.merge)({
            devtool: this.rendererSourceMapOption,
            mode: this.mode,
            entry: prefixedEntries.concat([entryPoint.preload.js]),
            output: {
                path: path_1.default.resolve(this.webpackDir, 'renderer', entryPoint.name),
                filename: 'preload.js',
            },
            node: {
                __dirname: false,
                __filename: false,
            },
        }, rendererConfig || {}, { target: 'electron-preload' });
    }
    async getRendererConfig(entryPoints) {
        const rendererConfig = await this.resolveConfig(this.pluginConfig.renderer.config);
        return entryPoints.map((entryPoint) => {
            const baseConfig = {
                target: this.rendererTarget(entryPoint),
                devtool: this.rendererSourceMapOption,
                mode: this.mode,
                output: {
                    path: path_1.default.resolve(this.webpackDir, 'renderer'),
                    filename: '[name]/index.js',
                    globalObject: 'self',
                    ...(this.isProd ? {} : { publicPath: '/' }),
                },
                node: {
                    __dirname: false,
                    __filename: false,
                },
                plugins: [new AssetRelocatorPatch_1.default(this.isProd, !!this.pluginConfig.renderer.nodeIntegration)],
            };
            if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                return (0, webpack_merge_1.merge)(baseConfig, {
                    entry: {
                        [entryPoint.name]: (entryPoint.prefixedEntries || []).concat([entryPoint.js]),
                    },
                    output: {
                        path: path_1.default.resolve(this.webpackDir, 'renderer'),
                        filename: '[name]/index.js',
                        globalObject: 'self',
                        ...(this.isProd ? {} : { publicPath: '/' }),
                    },
                    plugins: [
                        new html_webpack_plugin_1.default({
                            title: entryPoint.name,
                            template: entryPoint.html,
                            filename: `${entryPoint.name}/index.html`,
                            chunks: [entryPoint.name].concat(entryPoint.additionalChunks || []),
                        }),
                    ],
                }, rendererConfig || {});
            }
            else if ((0, rendererTypeUtils_1.isNoWindow)(entryPoint)) {
                return (0, webpack_merge_1.merge)(baseConfig, {
                    entry: {
                        [entryPoint.name]: (entryPoint.prefixedEntries || []).concat([entryPoint.js]),
                    },
                    output: {
                        path: path_1.default.resolve(this.webpackDir, 'renderer'),
                        filename: '[name]/index.js',
                        globalObject: 'self',
                        ...(this.isProd ? {} : { publicPath: '/' }),
                    },
                }, rendererConfig || {});
            }
            else if ((0, rendererTypeUtils_1.isPreloadOnly)(entryPoint)) {
                return (0, webpack_merge_1.merge)(baseConfig, {
                    target: 'electron-preload',
                    entry: {
                        [entryPoint.name]: (entryPoint.prefixedEntries || []).concat([entryPoint.preload.js]),
                    },
                    output: {
                        path: path_1.default.resolve(this.webpackDir, 'renderer'),
                        filename: 'preload.js',
                        globalObject: 'self',
                        ...(this.isProd ? {} : { publicPath: '/' }),
                    },
                }, rendererConfig || {});
            }
            else {
                throw new Error('Invalid renderer entry point detected.');
            }
        });
    }
}
exports.default = WebpackConfigGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2VicGFja0NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJwYWNrQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLGtEQUEwQjtBQUMxQiw4RUFBb0Q7QUFDcEQsc0RBQXdFO0FBQ3hFLGlEQUFzRDtBQUd0RCxxRkFBNkQ7QUFDN0QseUVBQWlEO0FBQ2pELGdFQUFvRjtBQUtwRixNQUFNLENBQUMsR0FBRyxJQUFBLGVBQUssRUFBQyw2Q0FBNkMsQ0FBQyxDQUFDO0FBTy9ELE1BQXFCLHNCQUFzQjtJQVd6QyxZQUFZLFlBQWlDLEVBQUUsVUFBa0IsRUFBRSxNQUFlLEVBQUUsSUFBWTtRQW9CaEcsMEVBQTBFO1FBQzFFLDRCQUE0QjtRQUM1QixxQkFBZ0IsR0FBRyxLQUFLLEVBQUUsTUFBNEIsRUFBMEIsRUFBRSxDQUNoRixNQUFNLENBQ0osRUFBRSxFQUNGO1lBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQ0YsQ0FBQztRQTNCRixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLENBQUMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQXFEO1FBQ3ZFLE1BQU0sU0FBUyxHQUNiLE9BQU8sTUFBTSxLQUFLLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLDhEQUE4RDtnQkFDN0QsT0FBTyxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFB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