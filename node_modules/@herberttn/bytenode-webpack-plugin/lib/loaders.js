"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRelativePath = exports.createLoaderCode = void 0;
const os_1 = require("os");
const path_1 = require("path");
const slash_1 = __importDefault(require("slash"));
function checkLoaderOptions(options) {
    if (!options || typeof options !== 'object') {
        throw new Error('loader options should be an object');
    }
    if (!Array.isArray(options.imports)) {
        throw new Error('loader options.imports should be an array');
    }
    if (options.imports.length <= 0) {
        throw new Error('loader options.imports cannot be empty');
    }
    if (options.imports.some(file => typeof file !== 'string')) {
        throw new Error('loader options.imports can only have strings');
    }
}
function createLoaderCode(options) {
    checkLoaderOptions(options);
    let { imports } = options;
    imports = imports.map(path => normalizeRelativePath(path));
    imports.unshift('bytenode');
    return imports
        .map(path => `require('${path}');`)
        .join('\n');
}
exports.createLoaderCode = createLoaderCode;
function normalizeRelativePath(relativePath) {
    if (/win32/.test((0, os_1.platform)()) && path_1.win32.isAbsolute(relativePath)) {
        relativePath = path_1.win32.normalize(relativePath);
        relativePath = relativePath.replace(/\\/g, '\\\\');
    }
    else {
        relativePath = (0, slash_1.default)(relativePath);
    }
    return relativePath;
}
exports.normalizeRelativePath = normalizeRelativePath;
//# sourceMappingURL=loaders.js.map